name: BugBot Code Review

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main, develop ]

jobs:
  bugbot-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better context
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
        cd ../mobile && npm ci
    
    - name: Run BugBot Review
      uses: cursor/bugbot-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        config_file: .bugbotrc
        review_type: ${{ github.event_name == 'pull_request' && 'pr' || 'commit' }}
        severity_threshold: 'medium'  # Only report medium and above for solo project
        max_issues: 50  # Limit to avoid overwhelming feedback
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const reportPath = 'bugbot-report.json';
          
          if (fs.existsSync(reportPath)) {
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            let comment = '## 🐛 BugBot Review Results\n\n';
            
            if (report.issues && report.issues.length > 0) {
              comment += `Found ${report.issues.length} issues to review:\n\n`;
              
              const bySeverity = {
                critical: [],
                high: [],
                medium: [],
                low: []
              };
              
              report.issues.forEach(issue => {
                bySeverity[issue.severity].push(issue);
              });
              
              ['critical', 'high', 'medium', 'low'].forEach(severity => {
                if (bySeverity[severity].length > 0) {
                  comment += `### ${severity.toUpperCase()} Priority (${bySeverity[severity].length})\n`;
                  bySeverity[severity].forEach(issue => {
                    comment += `- **${issue.file}:${issue.line}** - ${issue.message}\n`;
                  });
                  comment += '\n';
                }
              });
            } else {
              comment += '✅ No issues found! Great job!\n';
            }
            
            comment += '\n---\n*This review was generated by BugBot for the MindGarden project.*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } 