# PRD: Password Reset Workflow (Backend & Mobile)

## Summary
This document outlines the functional and user experience requirements for a secure password reset workflow for the Mind Clear application. This feature will allow users who have forgotten their password to regain access to their account via an email-based verification process. This PRD focuses specifically on the backend API and mobile application implementation.

---

## Product Goals
-   **Enable Account Recovery**: Provide a secure and intuitive method for users to reset their forgotten passwords.
-   **Maintain Security**: Ensure the password reset process is protected against common threats, such as email enumeration and token hijacking.
-   **Provide a Seamless User Experience**: The workflow should be simple, clear, and reassuring, minimizing user friction and cognitive load, which is especially important for our target users.

---

## User Stories

-   As a user who has forgotten my password, I want to request a password reset link to be sent to my registered email address so I can regain access to my account.
-   As a user who has received a reset email, I want to click a link that takes me to a page where I can set a new, secure password.
-   As a user setting a new password, I want to see the password complexity requirements clearly so I can create a valid password without guessing.
-   As a user, I want to receive clear confirmation that my password has been successfully changed and then be guided to the login screen.

---

## Functional Requirements

### 1. Backend API (`/backend`)
-   [ ] **Create New API Endpoint for Requesting Reset**
    -   Define a `POST /auth/request-password-reset` route in `/backend/src/routes/auth.js`.
    -   The endpoint should expect a JSON body with one field: `email`.
    -   Apply `express-validator` middleware to sanitize and validate that the `email` field is a properly formatted email address.
    -   Integrate with the Supabase Auth system by calling the `supabase.auth.resetPasswordForEmail()` function, passing the provided email.
    -   Configure the redirect URL in the Supabase call to point to the mobile app's deep link scheme (e.g., `mindclear://reset-password`).
    -   Ensure the endpoint always returns a generic `200 OK` success response (e.g., `{"message": "If an account with this email exists, a password reset link has been sent."}`) to prevent email enumeration.
-   [ ] **Apply Security Measures**
    -   Apply the existing rate-limiting middleware (5 requests per 15 minutes per IP) to the `POST /auth/request-password-reset` endpoint to prevent abuse.
    -   Add security event logging in `/backend/src/middleware/enhancedAuth.js` to track password reset requests.

### 2. Mobile App (`/mobile`)
-   [ ] **Create "Forgot Password" Screen**
    -   Create a new screen component at `/mobile/src/screens/auth/ForgotPasswordScreen.tsx`.
    -   Add a link to this screen from the `LoginScreen.tsx`.
    -   Implement a form with an email input and a "Send Reset Link" button.
    -   On submission, call the `POST /auth/request-password-reset` endpoint via the API service in `/mobile/src/services/api.ts`.
    -   Display a success toast on a successful API call.
-   [ ] **Implement Deep Linking for Password Reset**
    -   Configure deep linking for the React Native app to handle a custom URL scheme (e.g., `mindclear://reset-password`). This will involve modifications to the native Android (`AndroidManifest.xml`) and iOS (`AppDelegate.m` / project settings) configurations.
    -   Update the Supabase password reset email template to use this deep link URL.
    -   The app's navigation logic must parse the incoming deep link to extract the `access_token`.
-   [ ] **Create "Reset Password" Screen**
    -   Create a new screen component at `/mobile/src/screens/auth/ResetPasswordScreen.tsx`.
    -   This screen should be the target of the deep link. It will receive the `access_token` as a navigation parameter.
    -   Implement the password reset form with "New Password" and "Confirm New Password" fields.
    -   Use the Supabase client library's `supabase.auth.updateUser()` method to perform the password update.
    -   On success, show a success toast and navigate the user to the `LoginScreen`.
    -   On failure, show an error message with an option to navigate back to the `ForgotPasswordScreen`.
-   [ ] **Update Mobile Navigation**
    -   Add the `ForgotPasswordScreen` and `ResetPasswordScreen` to the authentication stack in `AppNavigator.tsx`.

---

## UX Notes
-   **Email Template**: The password reset email sent by Supabase should be customized to match the Mind Clear branding and visual style. It must clearly state the purpose of the email and that the link will expire.
-   **Clarity and Simplicity**: All text on the forms, buttons, and confirmation messages should use simple, clear, and reassuring language. Avoid technical jargon.
-   **Feedback**: Provide immediate visual feedback for all user actions, such as showing a loading spinner while the API call is in progress and using toast notifications for success or error states.
-   **Password Validation**: As the user types their new password, provide real-time feedback on whether they are meeting the complexity requirements.

---

## Edge Cases & Clarifying Questions
-   **Token Expiration**: What should the expiration time for a password reset token be? A short-lived token (e.g., 15-60 minutes) is recommended for security. This needs to be configured in the Supabase project settings.
-   **Multiple Requests**: If a user requests a password reset link multiple times, Supabase's default behavior is that only the most recent link is valid. Our UI should not prevent multiple requests but the user should be implicitly guided by the email instructions.
-   **Expired/Invalid Token**: If a user clicks an expired or invalid link, the mobile UI must display a user-friendly error message that clearly explains the problem and directs them to request a new link.
-   **Logged-In Users**: If an already authenticated user somehow triggers the password reset flow, they should be redirected to their main dashboard.