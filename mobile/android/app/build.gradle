apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'

// Add this line for vector icons
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

def hermesEnabled = true

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.foci.mobile"
    
    // Force Firebase BoM version for React Native Firebase packages
    configurations.all {
        resolutionStrategy {
            force 'com.google.firebase:firebase-bom:34.4.0'
        }
    }
    
    // Optimize build performance
    buildFeatures {
        buildConfig true
    }
    
    // Fix path length issues and speed up builds
    buildDir = "${rootDir}/build/${project.name}"
    
    defaultConfig {
        applicationId "com.foci.mobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 8
        versionName "1.0.7"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file(System.getenv("KEYSTORE_PATH") ?: 'mindclear-release-key.keystore')
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS") ?: "mindclear-key-alias"  
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }
    bundle {
        abi { enableSplit = true }
        density { enableSplit = true }
        language { enableSplit = true }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            // Speed up debug builds
            minifyEnabled false
            shrinkResources false
            debuggable true
            // Reduce build time by limiting architectures in debug
            ndk {
                abiFilters "arm64-v8a"
                debugSymbolLevel 'none'
            }
            // Disable unnecessary features for faster debug builds
            buildConfigField "boolean", "DEBUG_MODE", "true"
            // Keep default CMake settings; we already limit ABIs to speed builds
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            // Workaround prefab packaging errors in Windows release builds for some native libs
            packagingOptions {
                exclude "**/prefab/**"
            }
            // Optimize release builds
            buildConfigField "boolean", "DEBUG_MODE", "false"
        }
    }
}

// Add validation task for release builds
tasks.whenTaskAdded { task ->
    if (task.name.contains('Release') && (task.name.contains('Bundle') || task.name.contains('Assemble'))) {
        task.doFirst {
            // Validate required environment variables for release builds
            def keystorePath = System.getenv("KEYSTORE_PATH")
            def keystorePassword = System.getenv("KEYSTORE_PASSWORD")
            def keyPassword = System.getenv("KEY_PASSWORD")
            def keyAlias = System.getenv("KEY_ALIAS")
            
            if (!keystorePath || keystorePath.trim().isEmpty()) {
                throw new GradleException("KEYSTORE_PATH environment variable is required for release builds. Please set it to the path of your keystore file.")
            }
            
            if (!keystorePassword || keystorePassword.trim().isEmpty()) {
                throw new GradleException("KEYSTORE_PASSWORD environment variable is required for release builds.")
            }
            
            if (!keyPassword || keyPassword.trim().isEmpty()) {
                throw new GradleException("KEY_PASSWORD environment variable is required for release builds.")
            }
            
            if (!keyAlias || keyAlias.trim().isEmpty()) {
                throw new GradleException("KEY_ALIAS environment variable is required for release builds.")
            }
            
            // Validate keystore file exists
            def keystoreFile = file(keystorePath)
            if (!keystoreFile.exists()) {
                throw new GradleException("Keystore file not found at path: ${keystorePath}. Please check your KEYSTORE_PATH environment variable.")
            }
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Google Play Services for Google Sign-In
    implementation 'com.google.android.gms:play-services-auth:20.7.0'

    // Firebase dependencies for push notifications
    implementation platform('com.google.firebase:firebase-bom:34.4.0')
    implementation 'com.google.firebase:firebase-messaging'

    // Exclude react-native-worklets in release to avoid prefab CMake issues on Windows
    configurations.releaseImplementation {
        exclude group: 'com.swmansion.worklets', module: 'react-native-worklets'
    }
}
